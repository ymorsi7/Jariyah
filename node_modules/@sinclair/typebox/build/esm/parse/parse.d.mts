import { Static } from './parsebox/index.mjs';
import { TSchema, SchemaOptions } from '../type/schema/index.mjs';
import { Type } from './static.mjs';
/** `[Experimental]` Parses a TypeScript type annotation as an inferred TypeBox type */
export declare function Parse<Code extends string, Context extends Record<PropertyKey, TSchema> = {}>(context: Context, code: Code, options?: SchemaOptions): Static.Parse<Type, Code, Context>[0];
/** `[Experimental]` Parses a TypeScript type annotation as an inferred TypeBox type */
export declare function Parse<Code extends string>(code: Code, options?: SchemaOptions): Static.Parse<Type, Code, {}>[0];
/** `[Experimental]` Parses a TypeScript type annotation as TSchema */
export declare function ParseOnly<Code extends string, Context extends Record<PropertyKey, TSchema> = {}>(context: Context, code: Code, options?: SchemaOptions): TSchema | undefined;
/** `[Experimental]` Parses a TypeScript type annotation as TSchema */
export declare function ParseOnly<Code extends string>(code: Code, options?: SchemaOptions): TSchema | undefined;
